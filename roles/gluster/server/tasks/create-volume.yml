# Note: this role is not using the existing gluster.gluster modules because the module for managing volumes is poorly designed
# (doesn't for example support allow specifying individual brick paths). Another reason is that this way ansible creates the volume(s)
# if they don't exist but doesn't touch them if they already do. This isn't ideal but it's safer because it can never corrupt a volume containing data.

- name: Validate storage bricks count
  run_once: true
  ansible.builtin.assert:
    quiet: true
    that:
      - gluster_validation_item.0.storage_bricks | count == gluster_validation_item.1
    msg: |-
      Storage bricks for volume {{ gluster_volume_config.name }} do not match.
      Found {{ gluster_validation_item.0.storage_bricks | count }} bricks, expected {{ gluster_validation_item.1 }}
  loop: "{{ gluster_volume_config.replica_sets | product([gluster_volume_config.replicas]) }}"
  loop_control:
    loop_var: gluster_validation_item

- name: Validate arbiter bricks count
  run_once: true
  ansible.builtin.assert:
    quiet: true
    that:
      - gluster_validation_item.0.arbiter_bricks | count == gluster_validation_item.1
    msg: |-
      Arbiter bricks for volume {{ gluster_volume_config.name }} do not match.
      Found {{ gluster_validation_item.0.arbiter_bricks | count }} bricks, expected {{ gluster_validation_item.1 }}
  loop: "{{ gluster_volume_config.replica_sets | product([gluster_volume_config.arbiters]) }}"
  loop_control:
    loop_var: gluster_validation_item

- name: Check if volume exists
  ansible.builtin.command:
    cmd: "gluster volume info {{ gluster_volume_config.name }}"
  failed_when: false
  changed_when: false
  register: volume_exists

- name: Create storage bricks directories if they do not exist
  ansible.builtin.file:
    path: "{{ brick.path }}"
    state: directory
    owner: root
    group: root
    mode: 0770
  loop: "{{ gluster_volume_config.replica_sets | map(attribute='storage_bricks') | flatten | selectattr('host', 'equalto', inventory_hostname) }}"
  loop_control:
    loop_var: brick
  when: volume_exists.rc != 0

- name: Create arbiter bricks directories if they do not exist
  ansible.builtin.file:
    path: "{{ brick.path }}"
    state: directory
    owner: root
    group: root
    mode: 0770
  loop: "{{ gluster_volume_config.replica_sets | map(attribute='arbiter_bricks') | flatten | selectattr('host', 'equalto', inventory_hostname) }}"
  loop_control:
    loop_var: brick
  when: volume_exists.rc != 0

- name: Create volume if does not exist
  run_once: true
  ansible.builtin.command:
    cmd: "{{ lookup('template', 'create-volume-command.j2') }}"
  changed_when: volume_exists.rc != 0
  when: volume_exists.rc != 0

- name: Enable server tls
  run_once: true
  ansible.builtin.command:
    cmd: "gluster volume set {{ gluster_volume_config.name }} server.ssl on"
  changed_when: true

- name: Enable client tls
  run_once: true
  ansible.builtin.command:
    cmd: "gluster volume set {{ gluster_volume_config.name }} client.ssl on"
  changed_when: true

- name: "Set allowed clients"
  run_once: true
  ansible.builtin.command:
    cmd: "{{ lookup('template', 'set-volume-clients-command.j2') }}"
  changed_when: true

- name: Check volume status
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gluster volume info {{ gluster_volume_config.name }} | grep 'Status:' | cut -d' ' -f2
  args:
    executable: /bin/bash
  changed_when: false
  register: volume_status

- name: Start the volume
  run_once: true
  ansible.builtin.command:
    cmd: "gluster volume start {{ gluster_volume_config.name }}"
  changed_when: volume_status.stdout != "Started"
  when: volume_status.stdout != "Started"

- name: Check if quota is enabled
  run_once: true
  ansible.builtin.shell:
    # pipefail is ignored by design - it's a valid case
    cmd: gluster volume info {{ gluster_volume_config.name }} | grep 'features.quota:' | cut -d' ' -f2
  args:
    executable: /bin/bash
  register: volume_quota_enabled
  changed_when: false

- name: Enable quota
  retries: 5
  delay: 5
  run_once: true
  ansible.builtin.command:
    cmd: "gluster volume quota {{ gluster_volume_config.name }} enable"
  changed_when: "volume_quota_enabled.stdout != 'on'"
  when: "volume_quota_enabled.stdout != 'on'"

- name: Check if volume level quota is set
  retries: 5
  delay: 5
  until: "'Another transaction is in progress' | string not in volume_quota_set.stdout"
  register: volume_quota_set
  throttle: 1
  changed_when: false
  ansible.builtin.command:
    cmd: "gluster volume quota {{ gluster_volume_config.name }} list /"

- name: Set volume level quota
  retries: 5
  delay: 5
  register: volume_quota_limit_set
  until: "'Failed to start aux mount' | string not in volume_quota_limit_set.stdout"
  run_once: true
  ansible.builtin.command:
    cmd: "gluster volume quota {{ gluster_volume_config.name }} limit-usage / {{ gluster_volume_config.quota }}"
  changed_when: "'N/A' | string in volume_quota_set.stdout"
  when: "'N/A' | string in volume_quota_set.stdout"
