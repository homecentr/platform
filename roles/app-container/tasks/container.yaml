- name: Create app container
  community.general.proxmox:
    api_user: root@pam
    api_password: "{{ users_root_password }}"
    api_host: "localhost"
    hostname: "{{ container_vars.ansible_hostname }}"
    node: "{{ hostvars[container_vars.app_container_pve_node].ansible_hostname }}"
    password: "{{ users_root_password }}"
    ostemplate: "{{ container_vars.app_container_ostemplate }}"
    unprivileged: "{{ container_vars.app_container_unprivileged | default(1) }}"
    disk: "{{ container_vars.app_container_storage_name }}:{{ container_vars.app_container_storage_size_gb }},replicate=1"
    state: present

- name: Wait for the container to be created
  retries: 10
  delay: 3
  until: (app_container_info_raw is defined) and (app_container_info_raw.proxmox_vms | length) > 0
  register: app_container_info_raw
  community.general.proxmox_vm_info:
    api_user: root@pam
    api_password: "{{ users_root_password }}"
    api_host: "localhost"
    type: lxc
    name: "{{ container_vars.ansible_hostname }}"

- name: Flatten container info
  ansible.builtin.set_fact:
    app_container_info: "{{ app_container_info_raw.proxmox_vms.0 }}"

- name: Get container definition
  register: app_container_before_pct
  ansible.builtin.slurp:
    src: "/etc/pve/lxc/{{ app_container_info.vmid }}.conf"

- name: Update existing container values
  changed_when: true
  ansible.builtin.command:
    cmd: "{{ lookup('template', 'pct-set.j2', template_vars=(dict(app_container_id=app_container_info.vmid) | combine(container_vars))) }}"

- name: Get container definition
  register: app_container_after_pct
  ansible.builtin.slurp:
    src: "/etc/pve/lxc/{{ app_container_info.vmid }}.conf"

- name: Stop the container if it's started and definition has changed
  when: app_container_before_pct.content != app_container_after_pct.content and app_container_info.status == 'running' and (container_vars.app_container_autorestart_enabled | default(false))
  community.general.proxmox:
    api_user: root@pam
    api_password: "{{ users_root_password }}"
    api_host: "localhost"
    hostname: "{{ container_vars.ansible_hostname }}"
    state: stopped

- name: Start container
  community.general.proxmox:
    api_user: root@pam
    api_password: "{{ hostvars[container_vars.app_container_pve_node].users_root_password }}"
    api_host: "localhost"
    hostname: "{{ container_vars.ansible_hostname }}"
    state: started

- name: Wait for the container to start responding on SSH
  run_once: true
  ansible.builtin.wait_for:
    host: "{{ container_vars.ansible_host }}"
    port: 22
    timeout: 400
    sleep: 2
    msg: "Container {{ container_vars.ansible_hostname }} did not start responding on SSH in time."