- name: Create k3s bin directory
  ansible.builtin.file:
    path: "/usr/local/bin/k3s-bins/{{ k3s_cluster_version }}"
    owner: root
    group: root
    mode: 0755
    state: directory

- name: "Download k3s binary (x64)"
  notify: Restart k3s # New version might have been downloaded
  ansible.builtin.get_url:
    url: https://github.com/k3s-io/k3s/releases/download/{{ k3s_cluster_version }}/k3s
    checksum: sha256:https://github.com/k3s-io/k3s/releases/download/{{ k3s_cluster_version }}/sha256sum-amd64.txt
    dest: "/usr/local/bin/k3s-bins/{{ k3s_cluster_version }}/k3s"
    owner: root
    group: root
    mode: 0755
    force: false

- name: "Check k3s symlink destination"
  register: k3s_symlink
  ansible.builtin.stat:
    path: "/usr/local/bin/k3s"

- name: "Create k3s symlink"
  when: "not k3s_symlink.stat.exists or k3s_symlink.stat.lnk_source != '/usr/local/bin/k3s-bins/' + k3s_cluster_version + '/k3s'"
  ansible.builtin.file:
    src: "/usr/local/bin/k3s-bins/{{ k3s_cluster_version }}/k3s"
    dest: "/usr/local/bin/k3s"
    state: link
    force: true
    owner: root
    group: root
    mode: 0750

- name: Create K3s service file
  register: k3s_service
  ansible.builtin.template:
    src: "k3s.service.j2"
    dest: "{{ k3s_cluster_systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644
    force: true

- name: Create k3s directory if not exist
  ansible.builtin.file:
    path: /etc/rancher/k3s
    owner: root
    group: root
    mode: 0755
    state: directory

- name: Create config file
  notify: Restart k3s
  ansible.builtin.template:
    src: "k3s-config.yaml.j2"
    dest: "/etc/rancher/k3s/config.yaml"
    owner: root
    group: root
    mode: 0644
    force: true

- name: Start the k3s service
  retries: 10
  until: "'status' in k3s_service and k3s_service.status.ActiveState == 'active'"
  register: k3s_service
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: started
    enabled: true

- name: Wait for node-token
  ansible.builtin.wait_for:
    path: "{{ k3s_cluster_server_location }}/server/node-token"

- name: Read node-token from master
  ansible.builtin.slurp:
    path: "{{ k3s_cluster_server_location }}/server/node-token"
  register: node_token

- name: Store Master node-token
  ansible.builtin.set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Create kubectl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: "Force the k3s restart immediately if it needs to happen"
  ansible.builtin.meta: flush_handlers

- name: Wait for K3s management port to be available
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: 6443
    delay: 5
    state: started


- name: Wait kube api starts responding
  retries: 20
  kubernetes.core.k8s_info:
    kubeconfig: "/etc/rancher/k3s/k3s.yaml"
    api_version: v1
    kind: Pod
    namespace: kube-system
