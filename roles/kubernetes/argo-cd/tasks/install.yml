- name: Download CRD manifests
  register: argocd_crd_manifests
  ansible.builtin.uri:
    url: "https://raw.githubusercontent.com/argoproj/argo-cd/v{{ argocd_app_version }}/manifests/crds/{{ item }}"
    return_content: true
  loop:
    - application-crd.yaml
    - applicationset-crd.yaml
    - appproject-crd.yaml

- name: Install Argo CD CRDs
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    definition: "{{ item.content }}"
    state: present
  loop: "{{ argocd_crd_manifests.results }}"

- name: Install Argo CD helm chart
  run_once: true
  kubernetes.core.helm:
    state: present
    create_namespace: true
    release_name: argo-cd
    release_namespace: argo-cd
    chart_ref: argo-cd
    chart_repo_url: https://argoproj.github.io/argo-helm
    chart_version: "{{ argocd_chart_version }}"
    kubeconfig_path: "{{ argocd_kubeconfig_path }}"
    wait: true
    timeout: 5m0s
    skip_crds: true # CRDs installed separately outside of helm chart scope
    values:
      crds:
        install: false
      global:
        networkPolicy:
          create: true
          defaultDenyIngress: false
      redis-ha:
        enabled: false
      controller:
        replicas: 1
      server:
        replicas: 1
      repoServer:
        replicas: 1
        env:
          - name: HELM_PLUGINS
            value: /custom-tools/helm-plugins/
          - name: HELM_SECRETS_SOPS_PATH
            value: /custom-tools/sops
          - name: HELM_SECRETS_VALS_PATH
            value: /custom-tools/vals
          - name: HELM_SECRETS_KUBECTL_PATH
            value: /custom-tools/kubectl
          - name: HELM_SECRETS_CURL_PATH
            value: /custom-tools/curl
          - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
            value: "false"
          - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
            value: "false"
          - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
            value: "false"
          - name: SOPS_AGE_RECIPIENTS
            valueFrom:
              secretKeyRef:
                name: argocd-sops
                key: public_key
                optional: false
          - name: SOPS_AGE_KEY
            valueFrom:
              secretKeyRef:
                name: argocd-sops
                key: private_key
                optional: false
        volumes:
          - name: custom-tools
            emptyDir: {}
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools

        initContainers:
          - name: download-tools
            image: alpine:latest
            command: [sh, -ec]
            env:
              - name: HELM_SECRETS_VERSION
                value: "3.12.0"
              - name: KUBECTL_VERSION
                value: "1.24.3"
              - name: VALS_VERSION
                value: "0.18.0"
              - name: SOPS_VERSION
                value: "3.7.3"
            args:
              - |
                mkdir -p /custom-tools/helm-plugins
                wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;

                wget -qO /custom-tools/sops https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux
                wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl

                wget -qO- https://github.com/variantdev/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_amd64.tar.gz | tar -xzf- -C /custom-tools/ vals;
                
                # helm secrets wrapper mode installation (optional)
                # RUN printf '#!/usr/bin/env sh\nexec %s secrets "$@"' "${HELM_SECRETS_HELM_PATH}" >"/usr/local/sbin/helm" && chmod +x "/custom-tools/helm"
                
                chmod +x /custom-tools/*
            volumeMounts:
              - mountPath: /custom-tools
                name: custom-tools
      applicationSet:
        replicaCount: 1
      dex:
        enabled: false
      configs:
        secret:
          extra:
            "oidc.azure.clientSecret": "{{ argocd_oauth_client_secret }}"
        rbac:
          policy.default: role:readonly
          policy.csv: |
            g, "{{ argocd_admin_group_id }}", role:admin
        styles: |
          .sidebar__version {
            display: none;
          }
        cm:
          admin.enabled: false
          url: "{{ argocd_url }}"
          oidc.config: |
             name: Azure
             issuer: "{{ argocd_oauth_url }}"
             clientID: "{{ argocd_oauth_client_id }}"
             clientSecret: $oidc.azure.clientSecret
             requestedIDTokenClaims:
                groups:
                   essential: true
             requestedScopes:
                - openid
                - profile
                - email
          helm.valuesFileSchemes: >-
            secrets+gpg-import, secrets+gpg-import-kubernetes,
            secrets+age-import, secrets+age-import-kubernetes,
            secrets,secrets+literal,
            https
      extraObjects:
        - apiVersion: v1
          kind: Secret
          metadata:
            name: argocd-sops
            namespace: argo-cd
          data:
            public_key: "{{ argocd_sops.public_key | b64encode }}"
            private_key: "{{ argocd_sops.private_key | b64encode }}"