- name: Add prometheus-community helm repo
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: https://prometheus-community.github.io/helm-charts
    state: present

- name: Create network policies
  run_once: true
  k8s:
    kubeconfig: "{{ prometheus_operator_kubeconfig_path }}"
    definition: "{{ lookup('template', item) }}"
    apply: yes
    state: present
  with_items:
    - "network-policy-allow-internal.yml.j2"
    - "network-policy-allow-dns.yml.j2"
    - "network-policy-prometheus-allow-kubeapi.yml.j2"
    - "network-policy-prometheus-allow-cadvisor.yml.j2"
    - "network-policy-prometheus-allow-coredns.yml.j2"
    - "network-policy-prometheus-allow-ingress.yml.j2"
    - "network-policy-grafana-allow-kubeapi.yml.j2"
    - "network-policy-grafana-allow-ingress.yml.j2"
    - "network-policy-alertmanager-allow-internet.yml.j2"

- name: Deploy Prometheus Operator
  run_once: true
  kubernetes.core.helm:
    state: present
    release_name: prometheus-operator
    release_namespace: "monitoring"
    create_namespace: no
    chart_version: "{{ prometheus_operator_chart_version }}"
    chart_ref: prometheus-community/kube-prometheus-stack
    kubeconfig_path: "{{ prometheus_operator_kubeconfig_path }}"
    wait: true
    values:
      namespaceOverride: "monitoring"
      grafana:
        adminPassword: "{{ prometheus_operator_grafana_admin_password }}"
        persistence: 
          storageClassName: "{{ prometheus_operator_storage_class_name }}"
          accessModes:
            - ReadWriteMany
          enabled: true
        resources:
          requests:
              cpu: 10m
              memory: 10Mi
      alertmanager:
        alertmanagerSpec:
          resources:
            requests:
                cpu: 10m
                memory: 10Mi
      prometheus:
        prometheusSpec:
          serviceMonitorSelector: {}
          serviceMonitorSelectorNilUsesHelmValues: false
          storageSpec:
            volumeClaimTemplate:
              spec:
                storageClassName: "{{ prometheus_operator_storage_class_name }}"
                # volumeName: prometheus
                accessModes:
                  - ReadWriteMany
                resources:
                  requests:
                    storage: 10Gi
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
      nodeExporter:
        enabled: false # node-exporter deployed manually to all nodes (not just kube nodes)

# TODO: Alert manager respources

- name: Create prometheus instance
  run_once: true
  k8s:
    kubeconfig: "{{ prometheus_operator_kubeconfig_path }}"
    definition: "{{ lookup('template', item) }}"
    apply: yes
    state: present
  with_items:
    - "service-account.yml.j2"
    - "cluster-role.yml.j2"
    - "cluster-role-binding.yml.j2"
    - "prometheus-instance.yml.j2"